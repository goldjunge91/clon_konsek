name: Node.js

on:
    push:
        branches: ['production']

jobs:
    build:
        runs-on: self-hosted
        defaults:
            run:
                working-directory: ${{ github.workspace }}

        env:
            NODE_ENV: production
            ENABLE_GOOGLE_AUTH: ${{ secrets.ENABLE_GOOGLE_AUTH }}
            GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
            ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
            ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}
            NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DATABASE_URL: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Website anhalten
              run: |
                  . ~/.nvm/nvm.sh
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  pm2 --version
                  echo "Now we're in the workspace directory"
                  NODE_PATH=$(which node)
                  PM2_EXEC_PATH=$(which pm2)
                  echo "Node path: $NODE_PATH"
                  echo "PM2 path: $PM2_EXEC_PATH"
                  $PM2_EXEC_PATH
                  pm2 stop ecosystem.config.cjs
              continue-on-error: true
            - name: Debug on fail
              if: failure()
              run: |
                  echo "Workflow failed. Debugging information:"
                  env | grep -E "GITHUB_|RUNNER_"
                  # Vorsicht mit sensiblen Daten!
                  # env | grep -vE "SECRET|TOKEN|PASSWORD"
            - name: Use GitHub context
              run: |
                  echo "Repository: ${{ github.repository }}"
                  echo "Ref: ${{ github.ref }}"
                  echo "SHA: ${{ github.sha }}"
            - name: Check Node.js version
              run: |
                  . ~/.nvm/nvm.sh
                  echo "Node.js version: $(node -v)"
                  echo "npm version: $(npm -v)"

            - name: Cache f端r schnelles Deployment node-modules
              uses: actions/cache@v4
              id: cache-nodemodules
              with:
                  path: |
                      **/node_modules
                      ~/.npm
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-modules-
              continue-on-error: true
            - name: Cache f端r  Next.js build
              uses: actions/cache@v4
              with:
                  path: ${{ github.workspace }}/.next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.{js,jsx,ts,tsx,cjs,mjs}')}}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
                      ${{ runner.os }}-nextjs-
              continue-on-error: true
            # - name: Erstellen einer .env f端r Secrets
            #   run: |
            # cd $GITHUB_WORKSPACE
            # cat << EOF > .env

            # ENABLE_GOOGLE_AUTH=${{ secrets.ENABLE_GOOGLE_AUTH }}
            # GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            # GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

            # ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            # ENCRYPTION_IV=${{ secrets.ENCRYPTION_IV }}

            # NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            # NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            # NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}"

            # DB_HOST=${{ secrets.DB_HOST }}
            # DB_NAME=${{ secrets.DB_NAME }}
            # DB_USER=${{ secrets.DB_USER }}
            # DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            # DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}
            # EOF
            #   continue-on-error: true
            - name: Check critical environment variables
              run: |
                  source .env.production
                  critical_vars=(
                    "ENABLE_GOOGLE_AUTH"
                    "GOOGLE_CLIENT_ID"
                    "GOOGLE_CLIENT_SECRET"
                    "ENCRYPTION_KEY"
                    "ENCRYPTION_IV"
                    "NEXTAUTH_URL"
                    "NEXT_PUBLIC_API_URL"
                    "NEXTAUTH_SECRET"
                    "DB_HOST"
                    "DB_NAME"
                    "DB_USER"
                    "DB_PASSWORD"
                    "DATABASE_URL"
                  )
                  for var in "${critical_vars[@]}"; do
                    if [ -z "${!var}" ]; then
                      echo "Error: $var is not set or empty"
                      exit 1
                    else
                      echo "$var is set"
                    fi
                  done
                  echo "All critical environment variables are set."

            - name: Pr端fen der Umgebungsvariablen.
              run: |
                  if [ -s ".env.production" ]; then
                    echo ".env.production file exists and is not empty."
                  else
                    echo ".env.production file is missing or empty. Checking environment variables..."
                    missing_variables=()

                    if [ -z "${ENCRYPTION_KEY}" ]; then
                      missing_variables+=("ENCRYPTION_KEY")
                    fi

                    if [ -z "${ENCRYPTION_IV}" ]; then
                      missing_variables+=("ENCRYPTION_IV")
                    fi

                    if [ -z "${ENABLE_GOOGLE_AUTH}" ]; then
                      missing_variables+=("ENABLE_GOOGLE_AUTH")
                    fi

                    if [ ${#missing_variables[@]} -eq 0 ]; then
                      echo "All required environment variables are set."
                    else
                      echo "Error: The following required environment variables are not set: ${missing_variables[*]}"
                      exit 1
                    fi
                  fi
              continue-on-error: true

            - name: Install dependencies
              # if: steps.cache-nodemodules.outputs.cache-hit != 'true'
              run: |
                  . ~/.nvm/nvm.sh
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

                  printf "Erster versuch\n"
                  for i in {0 < 4};
                    do
                    npm ci && break
                    echo "npm ci failed. Retrying..."

                  done

              continue-on-error: true

            - name: Run error handling script
              if: failure()
              run: |
                  cd $GITHUB_WORKSPACE
                  chmod +x ./deploy-script.sh
                  source ./deploy-script.sh
              continue-on-error: true

            - name: Check PM2 installation
              run: |
                  chmod +x ./.github/workflows/script.sh
                  . ~/.nvm/nvm.sh
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  if ! command -v pm2 &> /dev/null; then
                  echo "PM2 is not installed."
                  npm install -g pm2
                  else
                  echo "PM2 is installed."
                  fi
                  pm2 --version
                  cd $GITHUB_WORKSPACE
                  /.github/workflows/script.sh

            - name: Run Deployment
              run: |
                  . ~/.nvm/nvm.sh
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  pm2 --version
                  NODE_PATH=$(which node)
                  PM2_EXEC_PATH=$(which pm2)
                  echo "Node path: $NODE_PATH"
                  echo "PM2 path: $PM2_EXEC_PATH"
                  $PM2_EXEC_PATH restart ecosystem.config.cjs
              continue-on-error: true

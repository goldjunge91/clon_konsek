name: Node.js

on:
    push:
        branches: ['production']

jobs:
    build:
        runs-on: self-hosted
        env:
            GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
            ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
            ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}
            NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            ENABLE_GOOGLE_AUTH: ${{ secrets.ENABLE_GOOGLE_AUTH }}
            DATABASE_URL: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Cache dependencies and build outputs
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      ${{ github.workspace }}/.next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
              continue-on-error: true

            - name: cache node modules
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-modules-
              continue-on-error: true

            - name: Create .env.production file
              run: |
                  pwd
                  cat << EOF > .env.production
                  DATABASE_URL=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}
                  ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
                  ENCRYPTION_IV=${{ secrets.ENCRYPTION_IV }}
                  NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
                  NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
                  DB_HOST=${{ secrets.DB_HOST }}
                  DB_NAME=${{ secrets.DB_NAME }}
                  DB_USER=${{ secrets.DB_USER }}
                  DB_PASSWORD=${{ secrets.DB_PASSWORD }}
                  ENABLE_GOOGLE_AUTH=${{ secrets.ENABLE_GOOGLE_AUTH }}
                  EOF
              continue-on-error: true

            - name: Verify environment setup
              run: |
                  if [ -s ".env.production" ]; then
                    echo ".env.production file exists and is not empty."
                  else
                    echo ".env.production file is missing or empty. Checking environment variables..."
                    missing_variables=()

                    if [ -z "${ENCRYPTION_KEY}" ]; then
                      missing_variables+=("ENCRYPTION_KEY")
                    fi

                    if [ -z "${ENCRYPTION_IV}" ]; then
                      missing_variables+=("ENCRYPTION_IV")
                    fi

                    if [ -z "${ENABLE_GOOGLE_AUTH}" ]; then
                      missing_variables+=("ENABLE_GOOGLE_AUTH")
                    fi

                    if [ ${#missing_variables[@]} -eq 0 ]; then
                      echo "All required environment variables are set."
                    else
                      echo "Error: The following required environment variables are not set: ${missing_variables[*]}"
                      exit 1
                    fi
                  fi
              continue-on-error: true

            - name: Clear npm cache
              run: npm cache clean --force

            - name: Install dependencies
              run: npm ci
              continue-on-error: true

            - name: Build application
              run: npm run build
              continue-on-error: true

            - name: Run error handling script
              if: failure()
              run: |
                  chmod +x ./.github/workflows/script.sh
                  ./.github/workflows/script.sh
              continue-on-error: true

            - name: Run Deployment
              run: pm2 start ecosystem.config.cjs
              continue-on-error: true
